{"version":3,"sources":["pages/Weather/Weather.module.css","pages/Menu/Menu.module.css","store/menu-reducer.ts","pages/Menu/Menu.tsx","pages/Time.tsx","api/weather-api.ts","store/weather-reducer.tsx","img/left.svg","pages/Weather/Weather.tsx","App.tsx","store/store.ts","index.tsx"],"names":["module","exports","initialState","timeMode","weatherMode","menuMode","setTimeModeAC","type","setWeatherModeAC","setMenuModeAC","Menu","dispatch","useDispatch","useSelector","state","menu","to","className","s","btn","onClick","Time","instance","axios","create","baseURL","weatherApi","data","get","city","weather","description","weatherSrc","dataLoading","setDataLoadingAC","Weather","formik","useFormik","initialValues","validate","values","errors","onSubmit","a","res","console","log","name","icon","main","temp","weatherDescription","source","weatherInCels","Math","round","toString","form","handleSubmit","input","getFieldProps","form_button","src","alt","back","left","App","exact","path","render","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d02a87f8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Weather_form__3NiS5\",\"input\":\"Weather_input__3lWCT\",\"form_button\":\"Weather_form_button__2Pb0q\",\"data\":\"Weather_data__2yGKm\",\"description\":\"Weather_description__oLZDG\",\"back\":\"Weather_back__2hTVB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__F8T3-\",\"btn\":\"Menu_btn__ybbJh\"};","\r\nconst initialState = {\r\n    timeMode: false,\r\n    weatherMode: false,\r\n    menuMode: false\r\n}\r\n\r\n\r\nexport const menuReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"MENU/SET-TIME-MODE\":\r\n            return {...state, timeMode: action.timeMode}\r\n        case \"MENU/SET-WEATHER-MODE\":\r\n            return {...state, weatherMode: action.weatherMode}\r\n        case \"MENU/SET-MENU-MODE\":\r\n            return {...state, menuMode: action.menuMode}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n\r\n//AC\r\n\r\n\r\nexport const setTimeModeAC = (timeMode: boolean) => ({type: \"MENU/SET-TIME-MODE\", timeMode} as const)\r\nexport const setWeatherModeAC = (weatherMode: boolean) => ({type: \"MENU/SET-WEATHER-MODE\", weatherMode} as const)\r\nexport const setMenuModeAC = (menuMode: boolean) => ({type: \"MENU/SET-MENU-MODE\", menuMode} as const)\r\n\r\n\r\n//Types\r\n\r\n\r\ntype ActionsType = ReturnType<typeof setTimeModeAC> | ReturnType<typeof setWeatherModeAC> | ReturnType<typeof setMenuModeAC>\r\ntype InitialStateType = typeof initialState","import React from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {setMenuModeAC, setTimeModeAC, setWeatherModeAC} from \"../../store/menu-reducer\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport s from '../Menu/Menu.module.css'\r\n\r\n\r\nexport const Menu = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const timeMode = useSelector<AppRootStateType, boolean>(state => state.menu.timeMode)\r\n    const weatherMode = useSelector<AppRootStateType, boolean>(state => state.menu.weatherMode)\r\n\r\n    const onTimeButtonClickHandler = () => {\r\n        dispatch(setMenuModeAC(false))\r\n        dispatch(setTimeModeAC(true))\r\n    }\r\n\r\n    const onWeatherButtonClickHandler = () => {\r\n        dispatch(setMenuModeAC(false))\r\n        dispatch(setWeatherModeAC(true))\r\n    }\r\n\r\n    if (timeMode) {\r\n        return <Redirect to={'/time'}/>\r\n    }\r\n\r\n    if (weatherMode) {\r\n        return <Redirect to={'/weather'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.menu}>\r\n            <button className={s.btn} onClick={onTimeButtonClickHandler}>Время</button>\r\n            <button className={s.btn} onClick={onWeatherButtonClickHandler}>Погода</button>\r\n        </div>\r\n\r\n    )\r\n}","import React, {useEffect} from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {AppRootStateType} from \"../store/store\"\r\nimport {setMenuModeAC, setTimeModeAC} from \"../store/menu-reducer\"\r\nimport {Redirect} from \"react-router-dom\"\r\n\r\n\r\n\r\n\r\n\r\nexport const Time = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const menuMode = useSelector<AppRootStateType, boolean>(state => state.menu.menuMode)\r\n\r\n    const onExitButtonHandler = () => {\r\n        dispatch(setTimeModeAC(false))\r\n        dispatch(setMenuModeAC(true))\r\n    }\r\n\r\n\r\n    if (menuMode) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <div onClick={onExitButtonHandler}>Выйти в главное меню</div>\r\n        </div>\r\n    )\r\n}","import axios from 'axios'\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.openweathermap.org/data/2.5/',\r\n})\r\n\r\nexport const weatherApi = {\r\n    getCityWeather(data :string){\r\n        return instance.get(`weather?q=${data}&appid=3123bb7bb014e9442d795d8cfd1b27ff`)\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {weatherApi} from \"../api/weather-api\";\r\n\r\nconst initialState = {\r\n    city: '',\r\n    weather: '',\r\n    description: '',\r\n    weatherSrc: '',\r\n    dataLoading: false\r\n}\r\n\r\n\r\nexport const weatherReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"WEATHER/SET-CITY\":\r\n            return {...state, city: action.city}\r\n        case \"WEATHER/SET-WEATHER\":\r\n            return {...state, weather: action.weather}\r\n        case \"WEATHER/SET-WEATHER-SRC\":\r\n            return {...state, weatherSrc: action.weatherSrc}\r\n        case \"WEATHER/SET-WEATHER-DESCRIPTION\":\r\n            return {...state, description: action.description}\r\n        case \"WEATHER/DATA-LOADING\":\r\n            return {...state, dataLoading: action.dataLoading}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n\r\n//AC\r\n\r\n\r\nexport const setCityAC = (city: string) => ({type: \"WEATHER/SET-CITY\", city} as const)\r\nexport const setWeatherAC = (weather: string) => ({type: \"WEATHER/SET-WEATHER\", weather} as const)\r\nexport const setWeatherSrcAC = (weatherSrc: string) => ({type: \"WEATHER/SET-WEATHER-SRC\", weatherSrc} as const)\r\nexport const setWeatherDescriptionAC = (description: string) => ({type: \"WEATHER/SET-WEATHER-DESCRIPTION\", description} as const)\r\nexport const setDataLoadingAC = (dataLoading: boolean) => ({type: \"WEATHER/DATA-LOADING\", dataLoading} as const)\r\n\r\n\r\n//TC\r\n\r\nexport const setDataTC = (data:string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(setDataLoadingAC(true))\r\n        let res = await weatherApi.getCityWeather(data)\r\n        console.log(res)\r\n        dispatch(setCityAC(res.data.name))\r\n        dispatch(setWeatherSrcAC(res.data.weather[0].icon))\r\n        dispatch(setWeatherDescriptionAC(res.data.weather[0].description))\r\n        dispatch(setWeatherAC(res.data.main.temp))\r\n        dispatch(setDataLoadingAC(false))\r\n    } catch (err) {\r\n\r\n    }\r\n}\r\n\r\n//Types\r\n\r\n\r\ntype ActionsType = ReturnType<typeof setCityAC>\r\n    | ReturnType<typeof setWeatherAC>\r\n    | ReturnType<typeof setWeatherSrcAC>\r\n    | ReturnType<typeof setWeatherDescriptionAC>\r\n    | ReturnType<typeof setDataLoadingAC>\r\n\r\ntype InitialStateType = typeof initialState","export default __webpack_public_path__ + \"static/media/left.ff0e6283.svg\";","import React from \"react\"\r\nimport {setMenuModeAC, setWeatherModeAC} from \"../../store/menu-reducer\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {AppRootStateType} from \"../../store/store\"\r\nimport {Redirect} from \"react-router-dom\"\r\nimport {useFormik} from \"formik\"\r\nimport {setDataTC} from \"../../store/weather-reducer\"\r\nimport s from '../Weather/Weather.module.css'\r\nimport left from '../../img/left.svg'\r\n\r\n\r\n\r\nexport const Weather = () => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            city: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.city) {\r\n                errors.city = 'Required';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(setDataTC(values.city))\r\n        },\r\n    })\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const menuMode = useSelector<AppRootStateType, boolean>(state => state.menu.menuMode)\r\n    const city = useSelector<AppRootStateType, string>(state => state.weather.city)\r\n    const weatherSrc = useSelector<AppRootStateType, string>(state => state.weather.weatherSrc)\r\n    const weather = useSelector<AppRootStateType, string>(state => state.weather.weather)\r\n    const weatherDescription = useSelector<AppRootStateType, string>(state => state.weather.description)\r\n    const dataLoading = useSelector<AppRootStateType, boolean>(state => state.weather.dataLoading)\r\n\r\n\r\n    const onExitButtonHandler = () => {\r\n        dispatch(setWeatherModeAC(false))\r\n        dispatch(setMenuModeAC(true))\r\n    }\r\n\r\n    const source = `https://openweathermap.org/img/wn/${weatherSrc}.png`\r\n    const weatherInCels = weather ? Math.round(+weather - 273).toString() : ''\r\n\r\n    if (menuMode) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <form className={s.form} onSubmit={formik.handleSubmit}>\r\n                {formik.errors.city ? <div>{formik.errors.city}</div> : null}\r\n                <input\r\n                    className={s.input}\r\n                    type=\"text\"\r\n                    {...formik.getFieldProps('city')}\r\n                />\r\n                <button className={s.form_button}>request the weather</button>\r\n            </form>\r\n            {dataLoading ?\r\n                <div>Loading</div>\r\n            :  <div className={s.data}>\r\n                    <div>City: <b>{city}</b></div>\r\n                    <div>\r\n                        weather: <b>{weatherInCels} <sup>O</sup>C</b>\r\n                    </div>\r\n                    <div className={s.description}>\r\n                        <span>description: <b>{weatherDescription}</b></span>\r\n                        <img src={source} alt=\"\"/>\r\n                    </div>\r\n                </div>}\r\n            <div className={s.back} onClick={onExitButtonHandler}>\r\n                <img src={left} alt=\"\"/>main menu\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type FormikErrorType = {\r\n    city: string\r\n}\r\n\r\n\r\n","import React from 'react'\nimport {Route, Switch } from 'react-router-dom'\nimport './App.css'\nimport {Menu} from \"./pages/Menu/Menu\"\nimport {Time} from \"./pages/Time\"\nimport {Weather} from \"./pages/Weather/Weather\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Welcome to WeatherApp</h1>\n        <Switch>\n          <Route exact path={'/'} render={() => <Menu/>}/>\n          <Route path={'/time'} render={() => <Time/>}/>\n          <Route path={'/weather'} render={() => <Weather/>}/>\n        </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {menuReducer} from \"./menu-reducer\"\r\nimport {weatherReducer} from \"./weather-reducer\"\r\n\r\nconst rootReducer = combineReducers({\r\n    menu: menuReducer,\r\n    weather: weatherReducer\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport {Provider} from \"react-redux\"\nimport {HashRouter} from \"react-router-dom\"\nimport {store} from \"./store/store\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <HashRouter>\n                <App/>\n            </HashRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}