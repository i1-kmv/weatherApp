{"version":3,"sources":["pages/Weather/Weather.module.css","pages/Time/Time.module.css","pages/Menu/Menu.module.css","components/MenuButton/MenuButton.module.css","components/BackButton/BackButton.module.css","store/menu-reducer.ts","components/MenuButton/MenuButton.tsx","pages/Menu/Menu.tsx","store/time-reducer.ts","img/left.svg","components/BackButton/BackButton.tsx","pages/Time/Time.tsx","api/weather-api.ts","store/weather-reducer.tsx","pages/Weather/Weather.tsx","App.tsx","store/store.ts","index.tsx"],"names":["module","exports","initialState","timeMode","weatherMode","menuMode","setTimeModeAC","type","setWeatherModeAC","setMenuModeAC","MenuButton","props","className","s","btn","onClick","onButtonClickHandler","title","Menu","dispatch","useDispatch","useSelector","state","menu","to","time","setTimeAC","BackButton","back","onExitButtonHandler","src","left","alt","Time","useEffect","timeNow","Date","toTimeString","replace","intervalId","setInterval","wrap","instance","axios","create","baseURL","weatherApi","data","get","city","weather","description","weatherSrc","dataLoading","error","setCityAC","setDataLoadingAC","setErrorAC","Weather","formik","useFormik","initialValues","validate","values","errors","onSubmit","trim","a","res","name","icon","main","temp","weatherDescription","source","weatherInCels","Math","round","toString","form","handleSubmit","input","getFieldProps","form_button","disabled","description_image","error_message","App","exact","path","render","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c94c7420.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"weather\":\"Weather_weather__3QO0d\",\"form\":\"Weather_form__3NiS5\",\"input\":\"Weather_input__3lWCT\",\"form_button\":\"Weather_form_button__2Pb0q\",\"data\":\"Weather_data__2yGKm\",\"description\":\"Weather_description__oLZDG\",\"description_image\":\"Weather_description_image__7AcOh\",\"back\":\"Weather_back__2hTVB\",\"error_message\":\"Weather_error_message__32kFX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Time_wrap___7kZ8\",\"time\":\"Time_time__JqdRo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Menu_menu__F8T3-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"MenuButton_btn__CQFmV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"back\":\"BackButton_back__2VDmM\"};","\r\nconst initialState = {\r\n    timeMode: false,\r\n    weatherMode: false,\r\n    menuMode: false\r\n}\r\n\r\nexport const menuReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"MENU/SET-TIME-MODE\":\r\n            return {...state, timeMode: action.timeMode}\r\n        case \"MENU/SET-WEATHER-MODE\":\r\n            return {...state, weatherMode: action.weatherMode}\r\n        case \"MENU/SET-MENU-MODE\":\r\n            return {...state, menuMode: action.menuMode}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport const setTimeModeAC = (timeMode: boolean) => ({type: \"MENU/SET-TIME-MODE\", timeMode} as const)\r\nexport const setWeatherModeAC = (weatherMode: boolean) => ({type: \"MENU/SET-WEATHER-MODE\", weatherMode} as const)\r\nexport const setMenuModeAC = (menuMode: boolean) => ({type: \"MENU/SET-MENU-MODE\", menuMode} as const)\r\n\r\ntype ActionsType = ReturnType<typeof setTimeModeAC> | ReturnType<typeof setWeatherModeAC> | ReturnType<typeof setMenuModeAC>\r\ntype InitialStateType = typeof initialState\r\n\r\n","import React from \"react\"\r\nimport s from \"../MenuButton/MenuButton.module.css\"\r\n\r\nexport const MenuButton = (props:MenuButtonPropsType) => {\r\n    return (\r\n        <button className={s.btn} onClick={props.onButtonClickHandler}>{props.title}</button>\r\n    )\r\n}\r\n\r\ntype MenuButtonPropsType = {\r\n    onButtonClickHandler: () => void\r\n    title:string\r\n}","import React from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport {setMenuModeAC, setTimeModeAC, setWeatherModeAC} from \"../../store/menu-reducer\"\r\nimport {AppRootStateType} from \"../../store/store\"\r\nimport s from '../Menu/Menu.module.css'\r\nimport {MenuButton} from \"../../components/MenuButton/MenuButton\"\r\n\r\nexport const Menu = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const timeMode = useSelector<AppRootStateType, boolean>(state => state.menu.timeMode)\r\n    const weatherMode = useSelector<AppRootStateType, boolean>(state => state.menu.weatherMode)\r\n\r\n    const onTimeButtonClickHandler = () => {\r\n        dispatch(setMenuModeAC(false))\r\n        dispatch(setTimeModeAC(true))\r\n    }\r\n\r\n    const onWeatherButtonClickHandler = () => {\r\n        dispatch(setMenuModeAC(false))\r\n        dispatch(setWeatherModeAC(true))\r\n    }\r\n\r\n    if (timeMode) {\r\n        return <Redirect to={'/time'}/>\r\n    }\r\n\r\n    if (weatherMode) {\r\n        return <Redirect to={'/weather'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.menu}>\r\n           <MenuButton onButtonClickHandler={onTimeButtonClickHandler} title={'Time'}/>\r\n           <MenuButton onButtonClickHandler={onWeatherButtonClickHandler} title={'Weather'}/>\r\n        </div>\r\n\r\n    )\r\n}","const initialState = {\r\n    time: '',\r\n}\r\n\r\nexport const timeReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"TIME/SET-TIME\":\r\n            return {...state, time: action.time}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setTimeAC = (time: string) => ({type: \"TIME/SET-TIME\", time} as const)\r\n\r\ntype ActionsType = ReturnType<typeof setTimeAC>\r\ntype InitialStateType = typeof initialState","export default __webpack_public_path__ + \"static/media/left.ff0e6283.svg\";","import s from \"../BackButton/BackButton.module.css\"\r\nimport left from \"../../img/left.svg\"\r\nimport React from \"react\"\r\n\r\nexport const BackButton = (props: BackButtonPropsType) => {\r\n    return (\r\n        <button className={s.back} onClick={props.onExitButtonHandler}>\r\n            <img src={left} alt=\"\"/>\r\n            main menu\r\n        </button>\r\n    )\r\n}\r\n\r\ntype BackButtonPropsType = {\r\n    onExitButtonHandler: () => void\r\n}","import React, {useEffect} from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {AppRootStateType} from \"../../store/store\"\r\nimport {setMenuModeAC, setTimeModeAC} from \"../../store/menu-reducer\"\r\nimport {Redirect} from \"react-router-dom\"\r\nimport {setTimeAC} from \"../../store/time-reducer\"\r\nimport s from \"../Time/Time.module.css\"\r\nimport {BackButton} from \"../../components/BackButton/BackButton\"\r\n\r\nexport const Time = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const menuMode = useSelector<AppRootStateType, boolean>(state => state.menu.menuMode)\r\n    const time = useSelector<AppRootStateType, string>(state => state.time.time)\r\n\r\n    useEffect(() => {\r\n\r\n        let timeNow = new Date().toTimeString().replace(/ .*/, '')\r\n\r\n        dispatch(setTimeAC(timeNow))\r\n\r\n        const intervalId: any = setInterval(() => {\r\n            dispatch(setTimeAC(timeNow))\r\n        }, 1000)\r\n\r\n        return () => intervalId\r\n\r\n    }, [dispatch])\r\n\r\n    const onExitButtonHandler = () => {\r\n        dispatch(setTimeModeAC(false))\r\n        dispatch(setMenuModeAC(true))\r\n    }\r\n\r\n    if (menuMode) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrap}>\r\n            <div className={s.time}>{time}</div>\r\n            <BackButton onExitButtonHandler={onExitButtonHandler}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.openweathermap.org/data/2.5/',\r\n})\r\n\r\nexport const weatherApi = {\r\n    getCityWeather(data :string){\r\n        return instance.get(`weather?q=${data}&appid=3123bb7bb014e9442d795d8cfd1b27ff`)\r\n    }\r\n}\r\n\r\n","import {Dispatch} from \"redux\"\r\nimport {weatherApi} from \"../api/weather-api\"\r\n\r\nconst initialState = {\r\n    city: '',\r\n    weather: '',\r\n    description: '',\r\n    weatherSrc: '',\r\n    dataLoading: false,\r\n    error: false\r\n}\r\n\r\nexport const weatherReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"WEATHER/SET-CITY\":\r\n            return {...state, city: action.city}\r\n        case \"WEATHER/SET-WEATHER\":\r\n            return {...state, weather: action.weather}\r\n        case \"WEATHER/SET-WEATHER-SRC\":\r\n            return {...state, weatherSrc: action.weatherSrc}\r\n        case \"WEATHER/SET-WEATHER-DESCRIPTION\":\r\n            return {...state, description: action.description}\r\n        case \"WEATHER/DATA-LOADING\":\r\n            return {...state, dataLoading: action.dataLoading}\r\n        case \"WEATHER/SET-ERROR\":\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setCityAC = (city: string) => ({type: \"WEATHER/SET-CITY\", city} as const)\r\nexport const setWeatherAC = (weather: string) => ({type: \"WEATHER/SET-WEATHER\", weather} as const)\r\nexport const setWeatherSrcAC = (weatherSrc: string) => ({type: \"WEATHER/SET-WEATHER-SRC\", weatherSrc} as const)\r\nexport const setWeatherDescriptionAC = (description: string) => ({type: \"WEATHER/SET-WEATHER-DESCRIPTION\", description} as const)\r\nexport const setDataLoadingAC = (dataLoading: boolean) => ({type: \"WEATHER/DATA-LOADING\", dataLoading} as const)\r\nexport const setErrorAC = (error: boolean) => ({type: \"WEATHER/SET-ERROR\", error} as const)\r\n\r\nexport const setDataTC = (data:string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(setDataLoadingAC(true))\r\n\r\n        const res = await weatherApi.getCityWeather(data)\r\n\r\n        dispatch(setCityAC(res.data.name))\r\n        dispatch(setWeatherSrcAC(res.data.weather[0].icon))\r\n        dispatch(setWeatherDescriptionAC(res.data.weather[0].description))\r\n        dispatch(setWeatherAC(res.data.main.temp))\r\n        dispatch(setDataLoadingAC(false))\r\n    } catch (err) {\r\n        setCityAC('')\r\n        dispatch(setDataLoadingAC(false))\r\n        dispatch(setErrorAC(true))\r\n    }\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof setCityAC>\r\n    | ReturnType<typeof setWeatherAC>\r\n    | ReturnType<typeof setWeatherSrcAC>\r\n    | ReturnType<typeof setWeatherDescriptionAC>\r\n    | ReturnType<typeof setDataLoadingAC>\r\n    | ReturnType<typeof setErrorAC>\r\n\r\ntype InitialStateType = typeof initialState","import React from \"react\"\r\nimport {setMenuModeAC, setWeatherModeAC} from \"../../store/menu-reducer\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {AppRootStateType} from \"../../store/store\"\r\nimport {Redirect} from \"react-router-dom\"\r\nimport {useFormik} from \"formik\"\r\nimport {setCityAC, setDataTC, setErrorAC} from \"../../store/weather-reducer\"\r\nimport s from '../Weather/Weather.module.css'\r\nimport {BackButton} from \"../../components/BackButton/BackButton\"\r\n\r\nexport const Weather = () => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            city: '',\r\n        },\r\n\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.city) {\r\n                errors.city = 'Required';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            dispatch(setDataTC(values.city.trim()))\r\n            dispatch(setErrorAC(false))\r\n            dispatch(setCityAC(''))\r\n            values.city = ''\r\n        },\r\n    })\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const menuMode = useSelector<AppRootStateType, boolean>(state => state.menu.menuMode)\r\n    const city = useSelector<AppRootStateType, string>(state => state.weather.city)\r\n    const weatherSrc = useSelector<AppRootStateType, string>(state => state.weather.weatherSrc)\r\n    const weather = useSelector<AppRootStateType, string>(state => state.weather.weather)\r\n    const weatherDescription = useSelector<AppRootStateType, string>(state => state.weather.description)\r\n    const dataLoading = useSelector<AppRootStateType, boolean>(state => state.weather.dataLoading)\r\n    const error = useSelector<AppRootStateType, boolean>(state => state.weather.error)\r\n\r\n    const onExitButtonHandler = () => {\r\n        dispatch(setWeatherModeAC(false))\r\n        dispatch(setMenuModeAC(true))\r\n        dispatch(setCityAC(''))\r\n        dispatch(setErrorAC(false))\r\n    }\r\n\r\n    const source = `https://openweathermap.org/img/wn/${weatherSrc}.png`\r\n    const weatherInCels = weather ? Math.round(+weather - 273).toString() : ''\r\n\r\n    if (menuMode) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    return (\r\n        <div className={s.weather}>\r\n            <form className={s.form} onSubmit={formik.handleSubmit}>\r\n                {formik.errors.city ? <div>{formik.errors.city}</div> : null}\r\n                <input\r\n                    className={s.input}\r\n                    type=\"text\"\r\n                    {...formik.getFieldProps('city')}\r\n                />\r\n                <button className={s.form_button} disabled={dataLoading}>request the weather</button>\r\n            </form>\r\n            {dataLoading ?\r\n                <div>Loading</div>\r\n            :  city &&\r\n                <div className={s.data}>\r\n                    <div>City: <b>{city}</b></div>\r\n                    <div>\r\n                        weather: <b>{weatherInCels} <sup>O</sup>C</b>\r\n                    </div>\r\n                    <div className={s.description}>\r\n                        <span>description: <b>{weatherDescription}</b></span>\r\n                        <img className={s.description_image} src={source} alt=\"weather image\"/>\r\n                    </div>\r\n                </div>\r\n            }\r\n            {error && <div className={s.error_message}>\r\n                An error occurred when requesting. Please check if the city name is correct and try again.\r\n            </div>}\r\n            <BackButton onExitButtonHandler={onExitButtonHandler}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type FormikErrorType = {\r\n    city?: string | null\r\n}\r\n","import React from 'react'\nimport {Route, Switch } from 'react-router-dom'\nimport './App.css'\nimport {Menu} from \"./pages/Menu/Menu\"\nimport {Time} from \"./pages/Time/Time\"\nimport {Weather} from \"./pages/Weather/Weather\"\n\n// src => enum => file => route to enum\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Welcome to WeatherApp</h1>\n\n        <Switch>\n          <Route exact path={'/'} render={() => <Menu/>}/>\n          <Route path={'/time'} render={() => <Time/>}/>\n          <Route path={'/weather'} render={() => <Weather/>}/>\n        </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {menuReducer} from \"./menu-reducer\"\r\nimport {weatherReducer} from \"./weather-reducer\"\r\nimport {timeReducer} from \"./time-reducer\"\r\n\r\nconst rootReducer = combineReducers({\r\n    menu: menuReducer,\r\n    weather: weatherReducer,\r\n    time: timeReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport {Provider} from \"react-redux\"\nimport {HashRouter} from \"react-router-dom\"\nimport {store} from \"./store/store\"\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}